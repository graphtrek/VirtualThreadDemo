name: Build and Push to GHCR

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Kódbázis klónozása
        uses: actions/checkout@v4

      - name: Java 21 beállítása
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Függőségek telepítése és build
        run: ./mvnw clean package -DskipTests

      - name: Analyze with SonarQube
        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarqube-scan-action@v1.1.0
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}   # add the URL of your instance to the secrets of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:
            # Unique key of your project. You can find it in SonarQube > [my project] > Project Information (top-right menu)
            # mandatory
            -Dsonar.projectKey=graphtrek_VirtualThreadDemo
            -Dsonar.organization=graphtrek-1
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false


      - name: Docker bejelentkezés GitHub Container Registry-hez
        run: echo "${{ secrets.PERSONAL_GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Docker image build (Alpine)
        run: |
          IMAGE_NAME=ghcr.io/${{ github.actor }}/virtualthreaddemo
          docker build -t $IMAGE_NAME:latest -f Dockerfile.alpine .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:${{ github.sha }}

      - name: Trivy telepítése
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Docker image biztonsági ellenőrzése (Trivy)
        run: |
          IMAGE_NAME=ghcr.io/${{ github.actor }}/virtualthreaddemo
          trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME:latest

      - name: Docker image feltöltése GHCR-re
        run: |
          IMAGE_NAME=ghcr.io/${{ github.actor }}/virtualthreaddemo
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Docker image mentése artifaktként
        uses: actions/upload-artifact@v4
        with:
          name: virtualthreaddemo-image
          path: |
            $(docker save ghcr.io/${{ github.actor }}/virtualthreaddemo:${{ github.sha }} -o virtualthreaddemo_latest.tar)
            virtualthreaddemo_latest.tar
