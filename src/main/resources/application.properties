spring.application.name=VirtualThreadDemo

spring.threads.virtual.enabled=false

# Meghatározza az egyidej?leg elérhet? szálak számát a kérések feldolgozásához.
# 200 default érték
server.tomcat.threads.max = 21

# Minimum száll amit mindig nyitva tart a Tomcat a kérések feldolgozásához.
server.tomcat.threads.min-spare = 3

# Meghatározza az egyidej?leg nyitott TCP-kapcsolatok maximális számát.
# Ez szabályozza, hogy a Tomcat egyszerre hány klienssel tartson fenn kapcsolatot,
# függetlenül attól, hogy azok aktívak vagy sem (pl. idle állapotban is lehetnek).
# Ha elérjük a max thread számot a tomcat még elfogad kéréseket
# amíg a maxConnections el nem éri
# 8192 default érték
server.tomcat.max-connections = 7

# Az operációs rendszer által biztosított connection queue.
# Legfeljebb egyszerre ennyi kapcsolódó kérést tud sorba állítani,
# miután a kapcsolatok száma eléri a maxConnections értéket.
# 100 default érték
# ha ez is megtelik a tomcat visszautasítja a kérést
server.tomcat.accept-count = 7

server.tomcat.accesslog.enabled=true

server.tomcat.accesslog.pattern="%h %l %u %t '%r' %s %b %D"
#logging.level.org.apache.tomcat=DEBUG
#logging.level.org.apache.catalina=DEBUG
logging.level.org.apache.tomcat.util.threads.LimitLatch=TRACE

#spring.task.execution.pool.core-size = 5
#spring.task.execution.pool.max-size = 100
#spring.task.execution.pool.queue-capacity = 2
